import {
    generateObject,
    GenerationOptions,
    trimTokens,
    handleProvider,
} from "../generation";
import { createRuntime } from "../test_resources/createRuntime";
import { ModelProviderName, ModelClass } from "../types";
import { ZodSchema } from "zod";
import dotenv from "dotenv";

dotenv.config({ path: ".dev.vars" });

describe("generateObject", () => {
    let runtime;

    beforeAll(async () => {
        // Create runtime with a mock environment
        const setup = await createRuntime({
            env: process.env as Record<string, string>,
        });
        runtime = setup.runtime;
    });

    test("should throw an error when context is empty", async () => {
        const options: GenerationOptions = {
            runtime,
            context: "",
            modelClass: ModelClass.SMALL,
        };

        await expect(generateObject(options)).rejects.toThrow(
            "generateObject context is empty"
        );
    });

    test("should handle supported provider calls", async () => {
        // Mock provider and trimTokens response
        const context = "Test prompt for generation";
        const provider = ModelProviderName.OPENAI;
        const schema: ZodSchema = ZodSchema.any(); // Replace with a valid schema if needed

        runtime.modelProvider = provider;

        (trimTokens as jest.Mock).mockResolvedValue(context);
        (handleProvider as jest.Mock).mockResolvedValue([
            { response: "Generated text" },
        ]);

        const options: GenerationOptions = {
            runtime,
            context,
            modelClass: ModelClass.SMALL,
            schema,
            schemaName: "TestSchema",
            schemaDescription: "A schema for testing purposes",
            mode: "json",
        };

        const result = await generateObject(options);

        expect(trimTokens).toHaveBeenCalledWith(
            context,
            expect.any(Number),
            ModelClass.SMALL
        );
        expect(handleProvider).toHaveBeenCalledWith(
            expect.objectContaining({
                provider,
                model: expect.anything(),
                schema,
                schemaName: "TestSchema",
                schemaDescription: "A schema for testing purposes",
            })
        );
        expect(result).toEqual([{ response: "Generated text" }]);
    });

    test("should throw an error for unsupported provider", async () => {
        runtime.modelProvider = "unsupportedProvider" as ModelProviderName;

        const options: GenerationOptions = {
            runtime,
            context: "This should fail",
            modelClass: ModelClass.SMALL,
        };

        await expect(generateObject(options)).rejects.toThrow(
            "Unsupported provider"
        );
    });
});

describe("handleProvider", () => {
    let runtime;

    beforeAll(async () => {
        const setup = await createRuntime({
            env: process.env as Record<string, string>,
        });
        runtime = setup.runtime;
    });

    test("should handle OpenAI provider call", async () => {
        const options = {
            runtime,
            provider: ModelProviderName.OPENAI,
            model: "text-davinci-003",
            apiKey: "testApiKey",
            schema: ZodSchema.any(),
            schemaName: "TestSchema",
            schemaDescription: "A test schema",
            mode: "json",
            modelOptions: {
                prompt: "Test prompt",
                temperature: 0.7,
                maxTokens: 100,
                frequencyPenalty: 0,
                presencePenalty: 0,
            },
            modelClass: ModelClass.SMALL,
            context: "This is a test context",
        };

        (handleOpenAI as jest.Mock).mockResolvedValue([
            { response: "Generated by OpenAI" },
        ]);

        const result = await handleProvider(options);

        expect(handleOpenAI).toHaveBeenCalledWith(
            expect.objectContaining({
                model: "text-davinci-003",
                apiKey: "testApiKey",
                schemaName: "TestSchema",
            })
        );
        expect(result).toEqual([{ response: "Generated by OpenAI" }]);
    });

    test("should throw error on unsupported provider in handleProvider", async () => {
        const options = {
            runtime,
            provider: "unsupportedProvider" as ModelProviderName,
            model: "unsupportedModel",
            apiKey: "testApiKey",
            schema: ZodSchema.any(),
            schemaName: "UnsupportedSchema",
            schemaDescription: "This should fail",
            mode: "json",
            modelOptions: {
                prompt: "Test unsupported provider",
                temperature: 0.7,
                maxTokens: 100,
                frequencyPenalty: 0,
                presencePenalty: 0,
            },
            modelClass: ModelClass.SMALL,
            context: "This is an unsupported provider context",
        };

        await expect(handleProvider(options)).rejects.toThrow(
            "Unsupported provider"
        );
    });
});
